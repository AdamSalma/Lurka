$base-colors: (
    punch:     #EA4335,  // $primary
    seagull:   #6EC4E7,  // $blue-light
    picton:    #4EADF3,  // $blue
    denim:     #0E43A9,  // triad of punch, use for tint?
    mantis:    #8FCC6D,  // $green
    fern:      #55b359,  // 4chan
    vermilion: #FF4500,  // reddit
);

// Are mixed with the base colors using the fn `color(name, shade)`
// values are: (shade, shadePercent)
$color-shades: (
    darkest:  (#000000, 20%),
    dark:     (#5c5c5c, 20%),
    light:    (#ffffff, 20%),
    lightest: (#ffffff, 40%),
);

// Greys used for text and backgrounds alike. reversing the order will invert 
// the Lurka's scheme
// 
// Is used by the function `grey(index)`
$greys: (
    #F5F5F5, // 1
    #E0E0E0,
    #BDBDBD,
    #757575,
    #616161, // 5
    #424242,
    #282828,
    #202020,
    #191919,
    #000000, // 10
);

/** Helper functions **/
@function color-shade($key) {
    @return map-get($color-shades, $key);
};

@function c($key, $var:null) {
    $c: map-get($base-colors, $key);
    @if ($var != null) {
        @return nth($greys, $var);
    }
    @return $c;
};


$primary: c(punch);
$secondary: c(denim);
$background-tint: $primary;


@function color-tint($color) {
    @return mix($background-tint, $color, 0.5%)
}

@function grey($index) {
    $grey: nth($greys, $index);
    @return color-tint($grey);
};
/** Helper functions end **/


/**
 * Main color palette
 */
$color-palette: (
    primary:        $primary,
    secondary:      $secondary,
    links:          c(picton),
    greentext:      c(mantis),
    fourchan:       c(fern),
    reddit:         c(vermilion),
    text-primary:   rgba(255,255,255, 1),
    text-secondary: rgba(255,255,255, 0.7),
    text-disabled:  rgba(255,255,255, 0.5),
    divider:        rgba(255,255,255, 0.12),
    highlight:      mix($primary, grey(7), 10%),
    boardpost:      grey(8),
    threadpost:     grey(7),
);

/**
 * Function to access to the color palette.
 * Takes a color name and shade. E.g:
  color(text-primary)
  color(primary, light)
  color(secondary, dark)
 */
@function color($color, $shade:null) {
    $x: map-get($color-palette, $color);

    @if ($shade) {
        $s: nth(color-shade($shade), 1);
        $percent: nth(color-shade($shade), 2);
        @return mix($s, $x, $percent);
    }
    @return $x;
};

